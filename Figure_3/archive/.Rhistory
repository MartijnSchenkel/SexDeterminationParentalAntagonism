muSD <- 0.001
# Selection effect parameters
s <- c(0.01, 0.01)
# a <- c(-0.1, -0.3)
# b <- c(3.11, 3.6)
a <- c(AY, AA)
b <- c(-CY * AY + 2, -CA * AA + 2)
b[1]
b[2]
# Recombination rates
r <- c(0.05, 0.05)
# Novel SD gene is male-determiner (T) or female-determiner (F)
NovelSexDeterminer <- F
# Frequency of focal pOne at all loci for [1] maternally and [2] paternally inherited copies
# Allele order
# 1/5: Y mat/pat
# 2/6: A mat/pat
# 3/7: PY mat/pat
# 4/8: PA mat/pat
# initial_frequencies <- c(0, 0, 0.5, 0.5,
#                          0.5, 0.0, 0.5, 0.5)
initial_frequencies <- c(0, 0, 0.5, 0.79,
0.5, 0.0, 0.5, 0.79)
pOne <- array(data = initial_frequencies, dim = c(length(r),2,2))
# -------------------- #
# Model preparation ----
# -------------------- #
# Fitness arrays
# Configurations:
# w[1,1] = mat 1, pat 1
# w[2,1] = mat 2, pat 1
# w[1,2] = mat 1, pat 2
# w[2,2] = mat 2, pat 2
wI <- array(data = c(1, 1+a[1]*s[1], 1+b[1]*s[1], 1+s[1]), dim = c(2,2))
wII <- array(data = c(1, 1+a[2]*s[2], 1+b[2]*s[2], 1+s[2]), dim = c(2,2))
# Calculate haplotype
pHaplo <- array(dim=c(length(r),4,4,4))
for(i in 1:length(r))
{
pHaplo[i,1,1,] <- c(1, 0, 0, 0)
pHaplo[i,1,2,] <- c(1/2, 1/2, 0, 0)
pHaplo[i,1,3,] <- c(1/2, 0, 1/2, 0)
pHaplo[i,1,4,] <- c((1-r[i])/2, r[i]/2, r[i]/2, (1-r[i])/2)
pHaplo[i,2,1,] <- c(1/2, 1/2, 0, 0)
pHaplo[i,2,2,] <- c(0, 1, 0, 0)
pHaplo[i,2,3,] <- c(r[i]/2, (1-r[i])/2, (1-r[i])/2, r[i]/2)
pHaplo[i,2,4,] <- c(0, 1/2, 0, 1/2)
pHaplo[i,3,1,] <- c(1/2, 0, 1/2, 0)
pHaplo[i,3,2,] <- c(r[i]/2, (1-r[i])/2, (1-r[i])/2, r[i]/2)
pHaplo[i,3,3,] <- c(0, 0, 1, 0)
pHaplo[i,3,4,] <- c(0, 0, 1/2, 1/2)
pHaplo[i,4,1,] <- c((1-r[i])/2, r[i]/2, r[i]/2, (1-r[i])/2)
pHaplo[i,4,2,] <- c(0, 1/2, 0, 1/2)
pHaplo[i,4,3,] <- c(0, 0, 1/2, 1/2)
pHaplo[i,4,4,] <- c(0, 0, 0, 1)
}
# Create gametogenesis array
G2G <- array(dim=c(4,4,4,4,4,4))
for(i in 1:4)
{
for(j in 1:4)
{
for(k in 1:4)
{
for(l in 1:4)
{
for(m in 1:4)
{
for(n in 1:4)
{
G2G[i,j,k,l,m,n] <-
pHaplo[1,i,k,m] *
pHaplo[2,j,l,n]
}
}
}
}
}
}
# Function to extract gamete frequencies from G2G array.
MakeGametes <- function(G){
A[G[1], G[2], G[3], G[4]] * G2G[G[1], G[2], G[3], G[4],,]
}
# Mutagenesis function (introduce novel SD gene on II)
mutate <- function(G)
{
G[,3] <- G[,1] * muSD
G[,1] <- G[,1] * (1 - muSD)
G[,4] <- G[,2] * muSD
G[,2] <- G[,2] * (1 - muSD)
G
}
# ----------------------- #
# Model initialization ----
# ----------------------- #
# Calculate initial haplotype frequencies
GS <- array(dim = c(length(r),2,4))
for(i in 1:length(r))
{
GS[i,1,] <- c((1 - pOne[i,1,1]) * (1 - pOne[i,2,1]),
(1 - pOne[i,1,1]) * (pOne[i,2,1]),
(pOne[i,1,1]) * (1 - pOne[i,2,1]),
(pOne[i,1,1]) * (pOne[i,2,1]))
GS[i,2,] <- c((1 - pOne[i,1,2]) * (1 - pOne[i,2,2]),
(1 - pOne[i,1,2]) * (pOne[i,2,2]),
(pOne[i,1,2]) * (1 - pOne[i,2,2]),
(pOne[i,1,2]) * (pOne[i,2,2]))
}
# Set up initial population and count number of focal alleles per genotype.
A <- array(dim = c(4, 4, 4, 4))
nOneM <- array(dim=c(4, 4, 4, 4, 4)) # Number of focal alleles in maternal haplotype
nOneP <- nOneM # number of focal alleles in paternal haplotype
nSD <- c(0,0,1,1)
nSA <- c(0,1,0,1)
# Calculates fitness based on genotypes at PY and PA separately, to be combined later..
wIP <- array(dim = c(4,4,4,4))
wIIP <- array(dim = c(4,4,4,4))
for(i in 1:4)
{
for(j in 1:4)
{
for(k in 1:4)
{
for(l in 1:4)
{
# Initialize population.
A[i,j,k,l] <- GS[1,1,i] * GS[2,1,j] * GS[1,2,k] *
GS[2,2,l]
# Count number of focal alleles per genotype.
nOneM[1,i,j,k,l] <- nSD[i] # freq of Y on maternal haplotype
nOneM[2,i,j,k,l] <- nSA[i] # freq of PY on maternal haplotype
nOneM[3,i,j,k,l] <- nSD[j] # freq of A on maternal haplotype
nOneM[4,i,j,k,l] <- nSA[j] # freq of PA on maternal haplotype
nOneP[1,i,j,k,l] <- nSD[k]
nOneP[2,i,j,k,l] <- nSA[k]
nOneP[3,i,j,k,l] <- nSD[l]
nOneP[4,i,j,k,l] <- nSA[l]
wIP[i,j,k,l] <- wI[nOneM[2,i,j,k,l] + 1, nOneP[2,i,j,k,l] + 1]
wIIP[i,j,k,l] <- wII[nOneM[4,i,j,k,l] + 1, nOneP[4,i,j,k,l] + 1]
}
}
}
}
nOne <- nOneM + nOneP
nOneM[4,4,,4,]
nHaps <- array(dim = c(length(r), 2, 2 * 2, 4,4,4,4))
# dimensions = LG, origin, haplotype variant,
# haplotype maternal XY, haplotype maternal A, haplotype paternal XY, haplotype paternal A
Haplotype <- c("00", "01", "10", "11")
LG <- c("XY", "A")
Origin <- c("Maternal", "Paternal")
nHaps[1,1,1,,,,] <- nOneM[1,,,,] == F & nOneM[2,,,,] == F
nHaps[1,1,2,,,,] <- nOneM[1,,,,] == F & nOneM[2,,,,] == T
nHaps[1,1,3,,,,] <- nOneM[1,,,,] == T & nOneM[2,,,,] == F
nHaps[1,1,4,,,,] <- nOneM[1,,,,] == T & nOneM[2,,,,] == T
nHaps[1,2,1,,,,] <- nOneP[1,,,,] == F & nOneP[2,,,,] == F
nHaps[1,2,2,,,,] <- nOneP[1,,,,] == F & nOneP[2,,,,] == T
nHaps[1,2,3,,,,] <- nOneP[1,,,,] == T & nOneP[2,,,,] == F
nHaps[1,2,4,,,,] <- nOneP[1,,,,] == T & nOneP[2,,,,] == T
nHaps[2,1,1,,,,] <- nOneM[3,,,,] == F & nOneM[4,,,,] == F
nHaps[2,1,2,,,,] <- nOneM[3,,,,] == F & nOneM[4,,,,] == T
nHaps[2,1,3,,,,] <- nOneM[3,,,,] == T & nOneM[4,,,,] == F
nHaps[2,1,4,,,,] <- nOneM[3,,,,] == T & nOneM[4,,,,] == T
nHaps[2,2,1,,,,] <- nOneP[3,,,,] == F & nOneP[4,,,,] == F
nHaps[2,2,2,,,,] <- nOneP[3,,,,] == F & nOneP[4,,,,] == T
nHaps[2,2,3,,,,] <- nOneP[3,,,,] == T & nOneP[4,,,,] == F
nHaps[2,2,4,,,,] <- nOneP[3,,,,] == T & nOneP[4,,,,] == T
# Create arrays with sex determination info
if(NovelSexDeterminer)
{
IsMale <- (nOne[1,,,,] > 0 | nOne[3,,,,] > 0)
} else {
IsMale <- (nOne[1,,,,] > 0 & nOne[3,,,,] == 0)
}
IsFemale <- 1 - IsMale
# Calculate fitness values of all genotypes.
W <- wIP * wIIP
# min(wIP);max(wIP)
# min(wIIP);max(wIIP)
# min(W);max(W)
# List allele type info
Alleles <- c("Y", "PY", "A", "PA")
LinkageGroup <- c("I", "I", "II", "II")
for(l in 1:length(LG)) for(o in 1:length(Origin)) for(h in 1:length(Haplotype))
{
dt <- tibble(Generation = 0,
SexRatio = A %*% IsMale,
Females = (A * IsFemale) %*% nHaps[l,o,h,,,,],
Males = (A * IsMale) %*% nHaps[l,o,h,,,,],
LinkageGroup = LG[l],
Origin = Origin[o],
Haplotype = Haplotype[h],
SPY = s[1],
SPA = s[2],
AY = a[1],
AA = a[2],
BY = b[1],
BA = b[2],
RY = r[1],
RA = r[2],
MaleDeterminer = as.numeric(NovelSexDeterminer)
)
dm <- dm %>% full_join(dt, by = names(dt))
}
# ---------------- #
# ---- THE LOOP ----
# ---------------- #
for(t in 1:max_t)
{
# Determine which genotypes have non-zero frequency and are female c.q. male.
Females <- which(A > 0 & IsFemale == T,arr.ind=T,useNames=F)
Males <- which(A > 0 & IsMale == T,arr.ind=T,useNames=F)
# Define gamete vectors
Gf <- rep(0, 4 * 4)
Gm <- rep(0, 4 * 4)
# Make gametes for both sexes separately.
for(i in 1:nrow(Females))
{
Gf <- Gf + MakeGametes(Females[i,])
}
for(i in 1:nrow(Males))
{
Gm <- Gm + MakeGametes(Males[i,])
}
# At generation mu_gen, mutate male and female gametes to introduce A
if(t == mu_gen)
{
Gf <- mutate(Gf)
Gm <- mutate(Gm)
}
# Reproduce & normalize
J <- Gf %o% Gm # Random fusion
J <- J * W     # Selection
J <- J/sum(J)  # Normalization
A <- J         # Maturation (non-overlapping generations)
# Write output every gen_skip generations.
if(t %% gen_skip == 0)
{
print(t)
for(l in 1:length(LG)) for(o in 1:length(Origin)) for(h in 1:length(Haplotype))
{
dt <- tibble(Generation = t,
SexRatio = A %*% IsMale,
Females = (A * IsFemale) %*% nHaps[l,o,h,,,,],
Males = (A * IsMale) %*% nHaps[l,o,h,,,,],
LinkageGroup = LG[l],
Origin = Origin[o],
Haplotype = Haplotype[h],
SPY = s[1],
SPA = s[2],
AY = a[1],
AA = a[2],
BY = b[1],
BA = b[2],
RY = r[1],
RA = r[2],
MaleDeterminer = as.numeric(NovelSexDeterminer)
)
dm <- dm %>% full_join(dt, by = names(dt))
}
}
}
# ================= #
# ---- Figure 3A ----
# ================= #
dm <- read.table("2023_07_31_data_3A.txt", T)
dm2 <- dm %>% filter(Generation > 10000) %>% dplyr::mutate(Generation = Generation - 10000)
# Convert haplotype frequencies to frequencies of focal S and P alleles
d2 <- dm2 %>% dplyr::mutate(SD = str_sub(Haplotype, 1,1), PA = str_sub(Haplotype,2,2),
Females = Females / (1 - SexRatio),
Males = Males / SexRatio) %>%
gather(Females, Males, key = "Sex", value = Frequency)
# Calculate total frequencies of focal S alleles per sex / origin / linkage group
d3 <- d2 %>% group_by(Sex, Generation, Origin, SD, LinkageGroup, MaleDeterminer) %>%
summarize(S = sum(Frequency)) %>%
filter(SD == 1) %>% ungroup() %>% select(-SD)
d3 %>% filter(Generation == 100)
# Calculate total frequencies of focal P alleles per sex / origin / linkage group
d4 <- d2 %>% group_by(Sex, Generation, Origin, PA, LinkageGroup, MaleDeterminer) %>%
summarize(P = sum(Frequency)) %>%
filter(PA == 1) %>% ungroup() %>% select(-PA)
# Combine back into single dataset.
d5 <- d3 %>% full_join(d4) %>% gather(S, P, key = "Locus", value = "Frequency")
d5 %>% filter(Generation == 100)
# Prepare figure setup (manual colors to fit with those in Figure 1)
colors <- viridis_pal(option = "plasma", begin = 0.1, end = 0.9)(4)
colors <- c(colors, rgb(85/255, 153/255, 255/255))
# # Exclude any frequencies that are never above zero (e.g. male-determining A in females)
d6 <- d5 %>% filter(!Sex %in% unique(Sex))
for(s in unique(d5$Sex)) for(o in unique(d5$Origin)) for(lo in unique(d5$Locus)) for(li in unique(d5$LinkageGroup)) for(m in unique(d5$MaleDeterminer))
{
dt <- d5 %>% filter(Sex == s, Origin == o, Locus == lo, LinkageGroup == li, MaleDeterminer == m)
# Exclude any cases where the frequency never exceeds the introductory frequency times 2
# The x2 is required because we look at sex * origin-specific frequencies
if(max(dt$Frequency > muSD * 2))
{
d6 <- d6 %>% full_join(dt, by = names(dt))
}
}
# Combine LG and locus into 1 variable (for plotting purposes)
d6 <- d6 %>% dplyr::mutate(LL = str_c(Locus, LinkageGroup),
LL = factor(LL, c("SXY", "PXY", "SA", "PA")))
# Plot results from invasion of male-determining A (Figure 2A)
pa <- d6 %>%
ggplot(aes(Generation, Frequency, color = LL, linetype = Origin)) +
geom_vline(xintercept = 10000, linetype = 3, size = 1, color = rgb(0.4,0.4,0.4)) +
geom_line(size = 1) +
facet_wrap(~Sex) +
scale_x_continuous(limits = c(0,60000), expand = c(0,0),
breaks = seq(0,60000, 10000), labels = seq(0,6,1)) +
scale_color_manual(values = colors,
labels = c(bquote(italic(Y)),
bquote(italic(p)[XY2]),
bquote(italic(A)),
bquote(italic(p)[A2])
)) +
scale_linetype_manual(values = c(1,2)) +
labs(color = "Allele",
x = bquote("Generation (?"*10^4*")")) +
theme(legend.position = "right",
strip.background = element_rect(fill = rgb(0.2,0.2,0.2)),
strip.text = element_text(color = "white"),
panel.spacing.x = unit(1, "lines")) +
guides(color = guide_legend(legend.position = "right",
title.position = "top",
direction = "horizontal",
title.hjust = 0.5, ncol = 2),
linetype = guide_legend(legend.position = "bottom",
title.position = "top",
direction = "horizontal",
title.hjust = 0.5, ncol = 1))
pa
# ================= #
# ---- Figure 3B ----
# ================= #
df <- read.table("2023_07_31_data_3B.txt", T)
df2 <- df %>% filter(Generation > 10000) %>% dplyr::mutate(Generation = Generation - 10000)
# Convert haplotype frequencies to frequencies of focal S and P alleles
# NOTE: SINCE WE ARE DOING A FEMALE HETEROGAMETY -> MALE HETEROGAMETY TRANSITION
# INSTEAD OF THE OTHER WAY AROUND, WE NEED TO FLIP THE LABELS FOR SEXES AND
# PARENT-OF-ORIGIN AS WELL
df2
d2 <- df2 %>% dplyr::mutate(SD = str_sub(Haplotype, 1,1), PA = str_sub(Haplotype,2,2),
Females = Females / (1 - SexRatio),
Males = Males / SexRatio,
Parent_Origin = ifelse(Origin == "Maternal", "Paternal", "Maternal")) %>%
gather(Females, Males, key = "Sex", value = Frequency)
# Calculate total frequencies of focal S alleles per sex / origin / linkage group
d3 <- d2 %>% group_by(Sex, Generation, Origin, SD, LinkageGroup, MaleDeterminer) %>%
summarize(S = sum(Frequency)) %>%
filter(SD == 1) %>% ungroup() %>% select(-SD)
# Calculate total frequencies of focal P alleles per sex / origin / linkage group
d4 <- d2 %>% group_by(Sex, Generation, Origin, PA, LinkageGroup, MaleDeterminer) %>%
summarize(P = sum(Frequency)) %>%
filter(PA == 1) %>% ungroup() %>% select(-PA)
# Combine back into single dataset.
d5 <- d3 %>% full_join(d4) %>% gather(S, P, key = "Locus", value = "Frequency")
# # Exclude any frequencies that are never above zero (e.g. male-determining A in females)
d6 <- d5 %>% filter(!Sex %in% unique(Sex))
for(s in unique(d5$Sex)) for(o in unique(d5$Origin)) for(lo in unique(d5$Locus)) for(li in unique(d5$LinkageGroup)) for(m in unique(d5$MaleDeterminer))
{
dt <- d5 %>% filter(Sex == s, Origin == o, Locus == lo, LinkageGroup == li, MaleDeterminer == m)
# Exclude any cases where the frequency never exceeds the introductory frequency times 2
# The x2 is required because we look at sex * origin-specific frequencies
if(max(dt$Frequency > muSD * 2))
{
d6 <- d6 %>% full_join(dt, by = names(dt))
}
}
# Combine LG and locus into 1 variable (for plotting purposes)
d6 <- d6 %>% dplyr::mutate(LL = str_c(Locus, LinkageGroup),
LL = factor(LL, c("SXY", "PXY", "SA", "PA")))
# Plot results from invasion of male-determining A (Figure 2A)
pb <- d6 %>%
ggplot(aes(Generation, Frequency, color = LL, linetype = Origin)) +
geom_vline(xintercept = 10000, linetype = 3, size = 1, color = rgb(0.4,0.4,0.4)) +
geom_line(size = 1) +
facet_wrap(~Sex) +
scale_x_continuous(limits = c(0,max_t-10000), expand = c(0,0),
breaks = seq(0,60000, 10000), labels = seq(0,6,1)) +
scale_color_manual(values = colors[c(3,4,5,2)],
labels = c(bquote(italic(A)),
bquote(italic(p)[A2]),
bquote(italic(Y*"*")),
bquote(italic(p)[XY2])
)) +
scale_linetype_manual(values = c(1,2)) +
labs(color = "Allele",
x = bquote("Generation (×"*10^4*")"),
linetype = "Origin") +
theme(legend.position = "right",
strip.background = element_rect(fill = rgb(0.2,0.2,0.2)),
strip.text = element_text(color = "white"),
panel.spacing.x = unit(1, "lines")) +
guides(color = guide_legend(legend.position = "right",
title.position = "top",
direction = "horizontal",
title.hjust = 0.5, ncol = 2),
linetype = guide_legend(legend.position = "right",
title.position = "top",
direction = "horizontal",
title.hjust = 0.5, ncol = 1))
pb
# Make legend
dp <- tibble(x = c(rep(1,5), rep(2,5)),
y = c(1:5,1:5),
c = c(letters[1:5], letters[1:5]),
lt = c("Maternal", "Paternal", "Maternal", "Paternal", "Maternal", "Paternal", "Maternal", "Paternal", "Maternal", "Paternal" ))
pp <- dp %>% ggplot(aes(x,y, color = c, linetype = lt)) + geom_line() +
guides(color = guide_legend(legend.position = "right",
title.position = "top",
direction = "vertical",
title.hjust = 0.5),
linetype = guide_legend(legend.position = "right",
title.position = "top",
direction = "vertical",
title.hjust = 0.5, ncol = 1))+
labs(color = "Allele", linetype = "Origin") +
scale_color_manual(values = colors,
labels = c(bquote(italic(s)[12]),
bquote(italic(p)[12]),
bquote(italic(s)[22]),
bquote(italic(p)[22]),
bquote(italic(s))))
# Extract legend
legend <- get_legend(pp)
# Combine subfigures into main figure
p <- plot_grid(pa + theme(legend.position = "none") +
facet_wrap(~Sex, ncol = 1) +
labs(x = bquote("Generation (?"*10^4*")")),
pb + theme(legend.position = "none") +
facet_wrap(~Sex, ncol = 1) +
labs(x = bquote("Generation (?"*10^4*")")),
ncol = 2, labels = c("A", "B")
)
p
# Add legend
p2 <- plot_grid(p, legend, ncol = 2, rel_widths = c(1,0.1))
# Add white space for part C (reciprocal invasion dynamics)
p3 <- plot_grid(p2, NULL, nrow = 2, rel_heights = c(2,0.8), labels = c("", "C"))
# Check result
p3
# ================= #
# ---- Figure 3A ----
# ================= #
dm <- read.table("2023_10_20_data_3A.txt", T)
dm2 <- dm %>% filter(Generation > 10000) %>% dplyr::mutate(Generation = Generation - 10000)
# Convert haplotype frequencies to frequencies of focal S and P alleles
d2 <- dm2 %>% dplyr::mutate(SD = str_sub(Haplotype, 1,1), PA = str_sub(Haplotype,2,2),
Females = Females / (1 - SexRatio),
Males = Males / SexRatio) %>%
gather(Females, Males, key = "Sex", value = Frequency)
# Calculate total frequencies of focal S alleles per sex / origin / linkage group
d3 <- d2 %>% group_by(Sex, Generation, Origin, SD, LinkageGroup, MaleDeterminer) %>%
summarize(S = sum(Frequency)) %>%
filter(SD == 1) %>% ungroup() %>% select(-SD)
d3 %>% filter(Generation == 100)
# Calculate total frequencies of focal P alleles per sex / origin / linkage group
d4 <- d2 %>% group_by(Sex, Generation, Origin, PA, LinkageGroup, MaleDeterminer) %>%
summarize(P = sum(Frequency)) %>%
filter(PA == 1) %>% ungroup() %>% select(-PA)
# Combine back into single dataset.
d5 <- d3 %>% full_join(d4) %>% gather(S, P, key = "Locus", value = "Frequency")
d5 %>% filter(Generation == 100)
# Prepare figure setup (manual colors to fit with those in Figure 1)
colors <- viridis_pal(option = "plasma", begin = 0.1, end = 0.9)(4)
colors <- c(colors, rgb(85/255, 153/255, 255/255))
# # Exclude any frequencies that are never above zero (e.g. male-determining A in females)
d6 <- d5 %>% filter(!Sex %in% unique(Sex))
for(s in unique(d5$Sex)) for(o in unique(d5$Origin)) for(lo in unique(d5$Locus)) for(li in unique(d5$LinkageGroup)) for(m in unique(d5$MaleDeterminer))
{
dt <- d5 %>% filter(Sex == s, Origin == o, Locus == lo, LinkageGroup == li, MaleDeterminer == m)
# Exclude any cases where the frequency never exceeds the introductory frequency times 2
# The x2 is required because we look at sex * origin-specific frequencies
if(max(dt$Frequency > muSD * 2))
{
d6 <- d6 %>% full_join(dt, by = names(dt))
}
}
# Combine LG and locus into 1 variable (for plotting purposes)
d6 <- d6 %>% dplyr::mutate(LL = str_c(Locus, LinkageGroup),
LL = factor(LL, c("SXY", "PXY", "SA", "PA")))
# Plot results from invasion of male-determining A (Figure 2A)
pa <- d6 %>%
ggplot(aes(Generation, Frequency, color = LL, linetype = Origin)) +
geom_vline(xintercept = 10000, linetype = 3, size = 1, color = rgb(0.4,0.4,0.4)) +
geom_line(size = 1) +
facet_wrap(~Sex) +
scale_x_continuous(limits = c(0,60000), expand = c(0,0),
breaks = seq(0,60000, 10000), labels = seq(0,6,1)) +
scale_color_manual(values = colors,
labels = c(bquote(italic(Y)),
bquote(italic(p)[XY2]),
bquote(italic(A)),
bquote(italic(p)[A2])
)) +
scale_linetype_manual(values = c(1,2)) +
labs(color = "Allele",
x = bquote("Generation (?"*10^4*")")) +
theme(legend.position = "right",
strip.background = element_rect(fill = rgb(0.2,0.2,0.2)),
strip.text = element_text(color = "white"),
panel.spacing.x = unit(1, "lines")) +
guides(color = guide_legend(legend.position = "right",
title.position = "top",
direction = "horizontal",
title.hjust = 0.5, ncol = 2),
linetype = guide_legend(legend.position = "bottom",
title.position = "top",
direction = "horizontal",
title.hjust = 0.5, ncol = 1))
pa
